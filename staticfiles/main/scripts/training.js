function updateModelDescription(model) {
    const descBlock = document.getElementById('model-description');
    const descriptions = {
    cnn: `
        <h5 class="text-primary mb-1">CNN ‚Äî 1-D Convolutional Net</h5>
        <p class="mb-1">–î–≤–µ 1-D&nbsp;—Å–≤—ë—Ä—Ç–∫–∏ –ø–æ&nbsp;64 —Ñ–∏–ª—å—Ç—Ä–∞ +&nbsp;BatchNorm/Dropout, –∑–∞—Ç–µ–º —Å–≤—ë—Ä—Ç–∫–∞ 128&nbsp;—Ñ–∏–ª—å—Ç—Ä–æ–≤, MaxPool &amp; GlobalAveragePooling.</p>
        <p class="mb-1">–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø–æ—Ç–æ–∫–∞—Ö —Å–µ—Ç–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏ –¥–∞—ë—Ç –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é –Ω–∞ Raspberry Pi.</p>
        <p> –†–∞—Å—á—ë—Ç–Ω–∞—è –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–∞—É–Ω–¥ ‚Äî 4 –º–∏–Ω—É—Ç 10 —Å–µ–∫—É–Ω–¥.</p>
        `,
        
    dnn: `
        <h5 class="text-primary mb-1">DNN ‚Äî 64-64-32 Fully-Connected</h5>
        <p class="mb-1">–¢—Ä–∏ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ—è (64 ‚Üí 64 ‚Üí 32) c ReLU, –ª—ë–≥–∫–∞—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ CPU.</p>
        <p class="mb-0">–ü–æ–¥—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É–∂–µ ¬´–ø–ª–æ—Å–∫–∏–µ¬ª –∏ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –Ω–∏–∑–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–∞ edge-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.</p>
        <p> –†–∞—Å—á—ë—Ç–Ω–∞—è –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–∞—É–Ω–¥ ‚Äî   30 —Å–µ–∫—É–Ω–¥.</p>`,

    cnn_bilstm: `
        <h5 class="text-primary mb-1">CNN + BiLSTM ‚Äî Hybrid</h5>
        <p class="mb-1">–°–≤—ë—Ä—Ç–∫–∏ 32 ‚Üí 64 —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –¥–∞–ª–µ–µ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ LSTM (64&nbsp;‚Üí 16) –¥–ª—è —É—á—ë—Ç–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.</p>
        <p class="mb-1">–õ—É—á—à–µ –≤—Å–µ–≥–æ –ª–æ–≤–∏—Ç —Å–ª–æ–∂–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Ç—Ä–∞—Ñ–∏–∫–µ, –∫–æ–≥–¥–∞ –ø–æ—Ä—è–¥–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ–Ω; —Ü–µ–Ω–∞ ‚Äî —Å–∞–º–∞—è —Ç—è–∂—ë–ª–∞—è –º–æ–¥–µ–ª—å –∏ –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É—á–∏—Ç—Å—è.</p>
        <p> –†–∞—Å—á—ë—Ç–Ω–∞—è –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ä–∞—É–Ω–¥ ‚Äî   9 –º–∏–Ω—É—Ç 18 —Å–µ–∫—É–Ω–¥.</p>`
};


    descBlock.innerHTML = descriptions[model] || '<p class="text-danger">–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.</p>';
}
const TrainingProgressChart = (() => {
    let chart = null;

    function init(roundsMax = 10) {
        const ctx = document.getElementById('training-progress-chart').getContext('2d');
        const labels = Array.from({ length: roundsMax }, (_, i) => i + 1);
        const data = {
            labels,
            datasets: [{
                label: '–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ä–∞—É–Ω–¥–∞–º',
                data: [],
                fill: false,
                borderColor: 'rgba(54, 162, 235, 1)',
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                tension: 0.2,
                pointRadius: 3
            }]
        };
        chart = new Chart(ctx, {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                animation: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: '–†–∞—É–Ω–¥'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: '–¢–æ—á–Ω–æ—Å—Ç—å'
                        },
                        beginAtZero: true,
                        suggestedMax: 1
                    }
                }
            }
        });
    }

    function addAccuracyPoint(round, accuracy) {
        if (!chart) return;
        chart.data.datasets[0].data[round - 1] = accuracy;
        chart.update();
    }

    function reset(roundsMax) {
        if (!chart) return;
        chart.data.labels = Array.from({ length: roundsMax }, (_, i) => i + 1);
        chart.data.datasets[0].data = [];
        chart.update();
    }

    function updateRounds(roundsMax) {
        if (!chart) return;
        chart.data.labels = Array.from({ length: roundsMax }, (_, i) => i + 1);
        chart.update();
    }
    return {
        init,
        addAccuracyPoint,
        reset,
        updateRounds
    };
})();
TrainingProgressChart.init(10);


// main/static/main/scripts/training.js
const wsUi = new WebSocket(`${window.location.protocol === 'https:' ? 'wss' : 'ws'}://${location.host}/ws/train_model/`);
/* --------- WebSocket UI-–∫–∞–Ω–∞–ª–∞ --------- */

wsUi.onopen    = () => log("üü¢ UI WebSocket –æ—Ç–∫—Ä—ã—Ç");
wsUi.onerror   = e  => log("üî¥ WebSocket error: " + e.message);
wsUi.onmessage = ({data}) => {

  const m = JSON.parse(data);
  if (m.type == "train_log") {
    log(m.text);
  } else if (m.type == "global_weights") {
    TrainingProgressChart.addAccuracyPoint(m.round, m.accuracy || 0.0);

    log(`–ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ (–†–∞—É–Ω–¥ ${m.round})`);
  } else if (m.type == "subscribe") {
    log(`–ü–æ–¥–∫–ª—é—á–µ–Ω ${m.device_name}`); 
    
    // TrainingProgressChart.updateRounds(m.round);
  } else if (m.type == "start_training") { 
    log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
  }
  else {
    log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${m.type} (${m.payload})`);
  }
};

/* --------- –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è --------- */
function startTraining() {
  const model  = document.getElementById("model").value;
  const rounds = +document.getElementById("rounds").value;
  if (!model) return;

  wsUi.send(JSON.stringify({
    type: "start_training",
    model,
    rounds
  }));

  document.getElementById("start-btn").disabled = true;
  log(`‚ñ∂ –°—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è: ${model}, ${rounds} —Ä–∞—É–Ω–¥–æ–≤`);
}

/* --------- –õ–æ–≥–∏ --------- */
function log(text) {
  const box = document.querySelector("#training-logs .alert");
  box.innerHTML += `<div>${new Date().toLocaleTimeString()} ‚Äì ${text}</div>`;
  box.scrollTop = box.scrollHeight;
}