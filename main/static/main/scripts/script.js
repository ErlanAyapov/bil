let selectedDeviceId = localStorage.getItem('selectedDeviceId');

function selectDevice(rowId) {
    const selectedRow = document.getElementById(rowId);
    if (!selectedRow) return;

    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å "selected" —É –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
    document.querySelectorAll('.device-tr').forEach(row => {
        row.classList.remove('selected');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å "selected" –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    selectedRow.classList.add('selected');

    const deviceId = selectedRow.getAttribute("data-device-id");
    localStorage.setItem('selectedDeviceId', deviceId);
    selectedDeviceId = deviceId;
}

document.addEventListener("DOMContentLoaded", () => {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const ws = new WebSocket(`${protocol}://${window.location.host}/ws/device_status/`);

    ws.onopen = () => {
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    };

    ws.onmessage = function (event) {
        try {
            const data = JSON.parse(event.data);
            console.log("üì° –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebSocket:", data);

            const {
                device_token,
                status,
                device_id: id,
                prediction,
                confidence,
                prediction_label
            } = data;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            const row = document.getElementById(`device-row-${id}`);
            if (row) {
                const statusCell = row.cells[1];
                const trafficCell = row.cells[4];
                const confidenceCell = row.cells[5];

                if (statusCell) {
                    statusCell.innerText = status === 'danger' ? '–û–ø–∞—Å–µ–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω';
                    statusCell.classList.toggle('text-danger', status === 'danger');
                    statusCell.classList.toggle('text-success', status === 'safe');
                }

                if (trafficCell) {
                    trafficCell.innerText = prediction_label + " (" + prediction + ")";
                }

                if (confidenceCell) {
                    confidenceCell.innerText = (parseFloat(confidence) * 100).toFixed(1) + "%";
                }
            } else {
                console.warn(`‚ùó –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }

            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ –ª–æ–≥–æ–≤ (–ø—Ä–∞–≤—ã–π –±–ª–æ–∫)
            const logBlock = document.querySelector('.logs');
            if (logBlock && selectedDeviceId === id) {
                logBlock.innerHTML =
                    `<span>–î–∞—Ç–∞: ${new Date().toLocaleString()}</span><br>` +
                    `<span>–¢—Ä–∞—Ñ–∏–∫: ${prediction_label}</span><br>` +
                    `<span>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${confidence}</span>`;
            }

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
        }
    };

    ws.onerror = function (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error);
    };

    ws.onclose = function (event) {
        console.log("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:", event);
        document.querySelectorAll('.device-tr').forEach(row => {
            row.cells[1].innerText = '-';
            row.cells[4].innerText = '-';
            row.cells[5].innerText = '-';
        });
    };
});
